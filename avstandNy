#include <Adafruit_MPU6050.h>
#include <Adafruit_Sensor.h>
#include <Wire.h>

#define TRIG_PIN 2
#define ECHO_PIN 19

#define MAX_DISTANCE 20  // cm (adjustable)
#define SPEED_OF_SOUND 0.0343  // cm/µs (343 m/s)
#define SAMPLING_RATE 8  // Hz (measurements per second)

// Calculate timeout for max distance (add small buffer)
#define MAX_TIMEOUT 1200 // in µs

// Calculate sampling interval dynamically
#define MEASUREMENT_INTERVAL (1000 / SAMPLING_RATE) // in ms

unsigned long lastMeasurementTime = 0;
float distance = 0;

Adafruit_MPU6050 mpu;

void setup() {
    Serial.begin(115200);
    while (!Serial){
        delay(10); // will pause Zero, Leonardo, etc until serial console opens}

    pinMode(TRIG_PIN, OUTPUT);
    pinMode(ECHO_PIN, INPUT);

    Serial.print("Max Timeout: ");
    Serial.print(MAX_TIMEOUT);
    Serial.println(" µs");

    Serial.print("Measurement Interval: ");
    Serial.print(MEASUREMENT_INTERVAL);
    Serial.println(" ms");

  Serial.println("Adafruit MPU6050 test!");

  // Try to initialize accelerometer
  if (!mpu.begin()) {
    Serial.println("Failed to find MPU6050 chip");
    while (1) {
      delay(10);
    }
  }
  Serial.println("MPU6050 Found!");

  mpu.setAccelerometerRange(MPU6050_RANGE_8_G);
  Serial.print("Accelerometer range set to: ");
  switch (mpu.getAccelerometerRange()) {
  case MPU6050_RANGE_2_G:
    Serial.println("+-2G");
    break;
  case MPU6050_RANGE_4_G:
    Serial.println("+-4G");
    break;
  case MPU6050_RANGE_8_G:
    Serial.println("+-8G");
    break;
  case MPU6050_RANGE_16_G:
    Serial.println("+-16G");
    break;
  }

  mpu.setFilterBandwidth(MPU6050_BAND_5_HZ);
  Serial.print("Filter bandwidth set to: ");
  switch (mpu.getFilterBandwidth()) {
  case MPU6050_BAND_260_HZ:
    Serial.println("260 Hz");
    break;
  case MPU6050_BAND_184_HZ:
    Serial.println("184 Hz");
    break;
  case MPU6050_BAND_94_HZ:
    Serial.println("94 Hz");
    break;
  case MPU6050_BAND_44_HZ:
    Serial.println("44 Hz");
    break;
  case MPU6050_BAND_21_HZ:
    Serial.println("21 Hz");
    break;
  case MPU6050_BAND_10_HZ:
    Serial.println("10 Hz");
    break;
  case MPU6050_BAND_5_HZ:
    Serial.println("5 Hz");
    break;
  }

  Serial.println("");
  delay(100);
}

void loop() {
    unsigned long currentMillis = millis();

    if (currentMillis - lastMeasurementTime >= MEASUREMENT_INTERVAL) {
        lastMeasurementTime = currentMillis;
        distance = getDistance();
        
        if (distance > 0) {
            Serial.print("Distance: ");
            Serial.print(distance);
            Serial.println(" cm");
        } else {
            Serial.println("Out of range or no object detected");
        }
    }
     /* Get new sensor events with the readings */
      sensors_event_t a, g, temp;
      mpu.getEvent(&a, &g, &temp);
    
      /* Print out the values */
      Serial.print("Acceleration X: ");
      Serial.print(a.acceleration.x);
      Serial.print(", Y: ");
      Serial.print(a.acceleration.y);
      Serial.print(", Z: ");
      Serial.print(a.acceleration.z);
      Serial.println(" m/s^2");
}

float getDistance() {
    // Trigger pulse
    digitalWrite(TRIG_PIN, LOW);
    delayMicroseconds(2);
    digitalWrite(TRIG_PIN, HIGH);
    delayMicroseconds(10);
    digitalWrite(TRIG_PIN, LOW);

    // Use pulseInLong for better performance on ESP32
    long duration = pulseInLong(ECHO_PIN, HIGH, MAX_TIMEOUT);

    // If duration is 0, return -1 (no valid echo received)
    if (duration == 0) return -1;

    // Convert duration to distance (cm)
    return (duration * SPEED_OF_SOUND) / 2;
}
